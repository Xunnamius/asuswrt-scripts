#!/bin/sh
#
# Fetch playlists for use with xupnpd2
#
# Supports excluding by text match in EXTINF line and adding handlers
# by REGEX match (for when the URL doesn't end with supported extension)
#
# For more info about the handlers see:
#  https://gist.github.com/WolfganP/19da4d736237c86e0c50637b1d124aaa#playlist-structure
#
#
# Configuration directory: /opt/etc/fetch-playlists/
#
# Sample playlists.txt:
# --------------------------------------
# https://iptv-org.github.io/iptv/languages/eng.m3u|iptv-org.github.io/languages
# https://iptv-org.github.io/iptv/languages/pol.m3u|iptv-org.github.io|polish.m3u
# https://iptv-org.github.io/iptv/languages/deu.m3u
# https://iptv-org.github.io/iptv/languages/hun.m3u||hungarian.m3u
# --------------------------------------
#
# Use '|' to separate extra options in line
# The string after first separator is subdirectory to place the playlist in
# The string after second separator is the target file name to save playlist as
#
#
# Sample playlists_exclude.txt:
# --------------------------------------
# BabyFirst.us|polish.m3u,eng.m3u
# AngelTVEurope.in|polish.m3u,eng.m3u
# CNNInternationalEurope.us|polish.m3u
# LoveNature.ca
# FashionTVEurope.fr
# --------------------------------------
#
# Use '|' to separate extra options in line
# The string after first separator is the list of the playlists the exclusion should affect
#
#
# One exact text match in EXTINF section per line
#
# Sample playlists_handlers.txt:
# --------------------------------------
# \.mpd$|type=mp4 handler=http
# --------------------------------------
#
# Use sed extended regex syntax, test your rule with this command:
# sed -E "/EXTINF/ {N; /YOUR_PATTERN_HERE/ s/\-1 /\-1 YOUR_CONTENT_HERE /}" "/tmp/playlist.m3u"
#
#
# You can also use comments in those .txt files (startin with #)
#
# You can override the cron schedule in `playlists.conf`
# by setting `CRON` variable to desired schedule string
#
# If you wish to use this with something else than xupnpd2
# then you have to set "MEDIA_ROOT" variable in the configuration
#

#shellcheck disable=SC2155

readonly SCRIPT_PATH="$(readlink -f "$0")"
readonly SCRIPT_NAME="$(basename "$SCRIPT_PATH" .sh | sed 's/S[0-9]*//')"
readonly SCRIPT_CONFIG="/opt/etc/fetch-playlists/playlists.conf"

PLAYLISTS_FILE="/opt/etc/fetch-playlists/playlists.txt"
EXCLUDE_FILE="/opt/etc/fetch-playlists/playlists_exclude.txt"
HANDLERS_FILE="/opt/etc/fetch-playlists/playlists_handlers.txt"
RESCAN_URL=
MEDIA_ROOT=
DEFAULT_HANDLER=
RESCAN_PATH="scripts/scan.lua"
CLEANUP=false
FORCE_HTTP=false
FORCE_HTTPS=false
CRON="0 6,18 * * *"

if [ -f "$SCRIPT_CONFIG" ]; then
    #shellcheck disable=SC1090
    . "$SCRIPT_CONFIG"
fi

PATH=/opt/bin:/opt/sbin:$PATH

is_started_by_system() { #ISSTARTEDBYSYSTEM_START#
    _PPID=$PPID
    while true; do
        [ -z "$_PPID" ] && break
        _PPID=$(< "/proc/$_PPID/stat" awk '{print $4}')

        grep -q "cron" "/proc/$_PPID/comm" && return 0
        grep -q "hotplug" "/proc/$_PPID/comm" && return 0
        [ "$_PPID" -gt "1" ] || break
    done

    return 1
} #STARTEDBYSYSTEMFUNC_END#

start() {
    if ! cru l | grep -q "#$SCRIPT_NAME#"; then
        cru a "$SCRIPT_NAME" "$CRON $SCRIPT_PATH cron"

        if is_started_by_system; then
            sh "$SCRIPT_PATH" cron &
        else
            sh "$SCRIPT_PATH" cron
        fi
    else
        echo "Already started"
    fi
}

stop() {
    cru d "$SCRIPT_NAME"
}

run() {
    if [ -f "/opt/etc/xupnpd2/xupnpd.cfg" ]; then
        HTTP_IP="$(nvram get lan_ipaddr)"
        HTTP_PORT="$(grep http_port < /opt/etc/xupnpd2/xupnpd.cfg | cut -d '=' -f 2)"
        MEDIA_ROOT="$(grep media_root < /opt/etc/xupnpd2/xupnpd.cfg | cut -d '=' -f 2)"
    fi

    [ -z "$MEDIA_ROOT" ] && { logger -st "$SCRIPT_NAME" "Media root directory is not set"; exit 1; }

    if [ -f "$PLAYLISTS_FILE" ]; then
        if [ "$FORCE_HTTP" = "true" ] && [ "$FORCE_HTTPS" = "true" ]; then
            logger -st "$SCRIPT_NAME" "You can only use either FORCE_HTTP or FORCE_HTTPS"
            exit 1
        fi

        [ ! -d "$MEDIA_ROOT" ] && mkdir -vp "$MEDIA_ROOT"

        #shellcheck disable=SC2115
        [ "$CLEANUP" = true ] && rm -fr "$MEDIA_ROOT"/*

        logger -st "$SCRIPT_NAME" "Downloading playlists..."

        while IFS="" read -r PLAYLIST || [ -n "$PLAYLIST" ]; do
            [ "$(echo "$PLAYLIST" | cut -c1-1)" = "#" ] && continue
            [ -z "$PLAYLIST" ] && continue

            SUBDIR=""
            FILENAME=""

            if echo "$PLAYLIST" | grep -q "|"; then
                SUBDIR="$(echo "$PLAYLIST" | cut -d '|' -f 2)"
                FILENAME="$(echo "$PLAYLIST" | cut -d '|' -f 3)"
                PLAYLIST="$(echo "$PLAYLIST" | cut -d '|' -f 1)"
            fi

            PLAYLIST="$(echo "$PLAYLIST" | sed -e "s/\n|\r//")"

            if [ -n "$FILENAME" ]; then
                BASENAME="$FILENAME"
            else
                BASENAME="$(basename "$PLAYLIST")"
            fi

            echo "Downloading: $PLAYLIST"

            if curl -fsSL "$PLAYLIST" -o "/tmp/$BASENAME"; then
                [ "$FORCE_HTTP" = true ] && sed -i 's/https:/http:/' "/tmp/$BASENAME"
                [ "$FORCE_HTTPS" = true ] && sed -i 's/http:/https:/' "/tmp/$BASENAME"

                DESTINATION="$MEDIA_ROOT/$BASENAME"

                if [ -n "$SUBDIR" ]; then
                    [ ! -d "$MEDIA_ROOT/$SUBDIR" ] && mkdir -vp "$MEDIA_ROOT/$SUBDIR"
                    DESTINATION="$MEDIA_ROOT/$SUBDIR/$BASENAME"
                fi

                mv -vf "/tmp/$BASENAME" "$DESTINATION"
            else
                logger -st "$SCRIPT_NAME" "Failed to download: $PLAYLIST"
            fi
        done < "$PLAYLISTS_FILE"

        if [ -f "$EXCLUDE_FILE" ]; then
            logger -st "$SCRIPT_NAME" "Removing excluded entries..."

            find "$MEDIA_ROOT" -type f -name "*.m3u" -o -name "*.m3u8" | while read -r FILE; do
                while IFS="" read -r EXCLUSION || [ -n "$EXCLUSION" ]; do
					EXCLUSION="$(echo "$EXCLUSION" | awk '{$1=$1};1')"

                    [ "$(echo "$EXCLUSION" | cut -c1-1)" = "#" ] && continue
                    [ -z "$EXCLUSION" ] && continue

                    if echo "$EXCLUSION" | grep -q "|"; then
                        FILES="$(echo "$EXCLUSION" | cut -d '|' -f 2)"
                        ! echo "$FILES" | grep -q "$(basename "$FILE")" && continue

                        EXCLUSION="$(echo "$EXCLUSION" | cut -d '|' -f 1)"
                    fi

                    EXCLUSION="$(echo "$EXCLUSION" | sed -e "s/\n|\r//")"
                    PATTERN=$(printf "%s\n" "$EXCLUSION" | sed 's/[]\/$*.^&[]/\\&/g')
                    sed "/$PATTERN/,+1d" -i "$FILE"
                done < "$EXCLUDE_FILE"
            done
        fi

        if [ -f "$HANDLERS_FILE" ]; then
            logger -st "$SCRIPT_NAME" "Inserting handlers..."

            find "$MEDIA_ROOT" -type f -name "*.m3u" -o -name "*.m3u8" | while read -r FILE; do
                while IFS="" read -r HANDLER || [ -n "$HANDLER" ]; do
					HANDLER="$(echo "$HANDLER" | awk '{$1=$1};1')"

                    [ "$(echo "$HANDLER" | cut -c1-1)" = "#" ] && continue
                    [ -z "$HANDLER" ] && continue

                    HANDLER="$(echo "$HANDLER" | sed -e "s/\n|\r//")"
                    PATTERN="$(echo "$HANDLER" | cut -d '|' -f 1)"
                    CONTENT="$(echo "$HANDLER" | cut -d '|' -f 2 | sed 's/[]\/$*.^&[]/\\&/g')"

                    sed -E "/EXTINF.*?\-1 tvg/ {N; /$PATTERN/ s/\-1 /\-1 $CONTENT /}" -i "$FILE"
                done < "$HANDLERS_FILE"
            done
        fi

        if [ -n "$DEFAULT_HANDLER" ]; then
            logger -st "$SCRIPT_NAME" "Setting default handler..."

            find "$MEDIA_ROOT" -type f -name "*.m3u" -o -name "*.m3u8" | while read -r FILE; do
                while IFS="" read -r HANDLER || [ -n "$HANDLER" ]; do
                    HANDLER="$(echo "$HANDLER" | sed -e "s/\n|\r//")"
                    PATTERN="$(echo "$HANDLER" | cut -d '|' -f 1)"
                    CONTENT="$(echo "$HANDLER" | cut -d '|' -f 2 | sed 's/[]\/$*.^&[]/\\&/g')"

                    sed "s/\-1 tvg/\-1 handler=$DEFAULT_HANDLER tvg/" -i "$FILE"
                done < "$HANDLERS_FILE"
            done
        fi

        if [ -z "$RESCAN_URL" ] && [ -n "$HTTP_IP" ] && [ -n "$HTTP_PORT" ] && [ -n "$RESCAN_PATH" ]; then
            RESCAN_URL="http://$HTTP_IP:$HTTP_PORT/$RESCAN_PATH"
        fi

        if [ -n "$RESCAN_URL" ]; then
            logger -st "$SCRIPT_NAME" "Forcing media rescan..."

            curl -fsL "$RESCAN_URL" > /dev/null
        fi
    else
        logger -st "$SCRIPT_NAME" "Playlists file not found: $PLAYLISTS_FILE"
        exit 1
    fi
}

case "$1" in
    "start")
        start
    ;;
    "stop")
        stop
    ;;
    "restart")
        stop
        start
    ;;
    "cron")
        run
    ;;
esac
